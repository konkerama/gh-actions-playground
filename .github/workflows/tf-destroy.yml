
name: 'Terraform Destroy'

on: workflow_dispatch


permissions:
  contents: read

jobs:
  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with:
        python-version: '3.8' 

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.IAMROLEARN }}
        aws-region: ${{ vars.AWSRegion }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./terraform-manifests
      run: |
        terraform init -reconfigure \
          -backend-config="bucket=${{ secrets.TFS3BUCKET }}" \
          -backend-config="key=${{secrets.TFS3KEY}}/${{github.ref_name}}/terraform.tfstate" \
          -backend-config="region=${{vars.AWSRegion}}"

    - name: Terraform Destroy
      working-directory: ./terraform-manifests
      run: terraform destroy --auto-approve -var-file=envs/${{github.ref_name}}.tfvars
